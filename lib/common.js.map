{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAC1B,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAE7D,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAEpF,MAAM,UAAU,WAAW,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;IACpE,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,EAAe;IAC1C,sFAAsF;IACtF,qGAAqG;IACrG,MAAM,OAAO,GAAG,gBAAgB,IAAI,MAAM;QACxC,CAAC,CAAC,sBAAsB,CAAC,EAAE,CAAC;QAC5B,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;IAClD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,aAAa,CAAC,OAAe,EAAE;QAC7B,OAAO,IAAI;aACR,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;aACtB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,MAAM,CAAC,CAAC;IACjB,CAAC;IAED,WAAW,CAAC,QAAkB,EAAE;QAC9B,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;CACF,CAAA;AAED,MAAM,UAAU,eAAe,CAAC,IAAc,EAAE,OAAiB,EAAE;IACjE,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC","sourcesContent":["import { of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { createResizeObservable } from '@hydecorp/component';\n\nexport { applyMixins, subscribeWhen, filterWhen, tween } from '@hydecorp/component';\n\nexport function easeOutSine(t: number, b: number, c: number, d: number) {\n  return c * Math.sin((t / d) * (Math.PI / 2)) + b;\n}\n\nexport function observeWidth(el: HTMLElement) {\n  // This component should have at least basic support without `ResizeObserver` support,\n  // so we pass a one-time measurement when it's missing. Obviously this won't update, so BYO polyfill.\n  const resize$ = \"ResizeObserver\" in window\n    ? createResizeObservable(el)\n    : of({ contentRect: { width: el.clientWidth }});\n  return resize$.pipe(map(({ contentRect: { width } }) => width));\n}\n\nexport const rangeConverter = {\n  fromAttribute(attr: string = '') {\n    return attr\n      .replace(/[\\[\\]]/g, '')\n      .split(\",\")\n      .map(Number);\n  },\n\n  toAttribute(range: number[] = []) {\n    return range.join(',');\n  },\n}\n\nexport function rangeHasChanged(curr: number[], prev: number[] = []) {\n  return curr.length !== prev.length || curr.some((v, i) => v !== prev[i]);\n}\n"]}