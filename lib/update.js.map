{"version":3,"file":"update.js","sourceRoot":"","sources":["../src/update.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,WAAW;IAUtB,SAAS,CAAC,UAAkB,EAAE,WAAmB;QAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;QAEtD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;CACF;AAED,MAAM,OAAgB,UAAU;IAS9B,YAAY,MAAmB;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAVD,MAAM,CAAC,qBAAqB,CAAC,MAAmB;QAC9C,MAAM,QAAQ,GAAG,mBAAmB,IAAI,OAAO,CAAC,SAAS,IAAI,KAAK,IAAI,MAAM,IAAI,QAAQ,IAAI,GAAG,CAAC;QAChG,OAAO,QAAQ;YACb,CAAC,CAAC,IAAI,wBAAwB,CAAC,MAAM,CAAC;YACtC,CAAC,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAMD,IAAI,SAAS,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA,CAAC,CAAC;IAChD,IAAI,OAAO,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA,CAAC,CAAC;CAG7C;AAED,MAAM,OAAO,YAAa,SAAQ,UAAU;IAC1C,YAAY,MAAmB,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEnD,SAAS,CAAC,UAAkB,EAAE,OAAe;QAC3C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,aAAa,UAAU,UAAU,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,OAAO,EAAE,CAAC;IAC5C,CAAC;CACF;AAED,MAAM,OAAO,wBAAyB,SAAQ,UAAU;IAItD,YAAY,MAAmB;QAC7B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAiB,CAAC,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,UAAkB,EAAE,OAAe;QACzC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAkB,CAAC,CAAkB,CAAC,KAAK,GAAG,UAAU,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;QAE5B,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;CACF","sourcesContent":["export type CallbackValue = { translateX: number, opacity: number };\n\nexport class UpdateMixin {\n  contentEl!: HTMLElement;\n  scrimEl!: HTMLElement;\n\n  translateX!: number;\n  side!: string;\n  opacity!: number;\n\n  updater!: DOMUpdater;\n\n  updateDOM(translateX: number, drawerWidth: number) {\n    const inv = this.side === \"left\" ? 1 : -1;\n    const opacity = (translateX / drawerWidth) * inv || 0;\n\n    this.translateX = translateX;\n    this.opacity = opacity;\n\n    this.updater.updateDOM(translateX, opacity);\n  }\n}\n\nexport abstract class DOMUpdater {\n  static getUpdaterForPlatform(parent: UpdateMixin) {\n    const hasCSSOM = \"attributeStyleMap\" in Element.prototype && \"CSS\" in window && \"number\" in CSS;\n    return hasCSSOM\n      ? new AttributeStyleMapUpdater(parent)\n      : new StyleUpdater(parent);\n  }\n\n  private parent: UpdateMixin;\n  constructor(parent: UpdateMixin) {\n    this.parent = parent;\n  }\n  get contentEl() { return this.parent.contentEl }\n  get scrimEl() { return this.parent.scrimEl }\n\n  abstract updateDOM(translateX: number, opacity: number): void;\n}\n\nexport class StyleUpdater extends DOMUpdater {\n  constructor(parent: UpdateMixin) { super(parent); }\n\n  updateDOM(translateX: number, opacity: number) {\n    this.contentEl.style.transform = `translate(${translateX}px, 0px)`;\n    this.scrimEl.style.opacity = `${opacity}`;\n  }\n}\n\nexport class AttributeStyleMapUpdater extends DOMUpdater {\n  private tvalue: CSSTransformValue;\n  private ovalue: CSSUnitValue;\n\n  constructor(parent: UpdateMixin) {\n    super(parent);\n    this.tvalue = new CSSTransformValue([new CSSTranslate(CSS.px(0), CSS.px(0))]);\n    this.ovalue = CSS.number(1);\n  }\n\n  updateDOM(translateX: number, opacity: number) {\n    ((this.tvalue[0] as CSSTranslate).x as CSSUnitValue).value = translateX;\n    this.ovalue.value = opacity;\n\n    this.contentEl.attributeStyleMap.set(\"transform\", this.tvalue);\n    this.scrimEl.attributeStyleMap.set(\"opacity\", this.ovalue);\n  }\n}"]}